<?php

namespace App\Http\Controllers\Chatbot;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Config;
use Illuminate\Support\Facades\Auth;
use App\Services\ChatbotService;

class ChatbotController extends Controller
{
    protected $chatbotService;

    public function __construct(ChatbotService $chatbotService)
    {
        $this->chatbotService = $chatbotService;
    }

    /**
     * X·ª≠ l√Ω tin nh·∫Øn t·ª´ ng∆∞·ªùi d√πng
     * Lu·ªìng: Detect Intent -> Generate Scenario Response -> Enhance with Gemini -> Return
     */
    public function chat(Request $request)
    {
        $request->validate([
            'message' => 'required|string|max:500',
        ]);

        $userMessage = trim($request->input('message'));
        $userMessageLower = mb_strtolower($userMessage, 'UTF-8');

        try {
            // B∆∞·ªõc 1: Ph√°t hi·ªán Intent t·ª´ tin nh·∫Øn ng∆∞·ªùi d√πng
            $intent = $this->detectIntent($userMessageLower);
            
            Log::info('Chatbot Intent Detected', [
                'message' => $userMessage,
                'intent' => $intent
            ]);

            // B∆∞·ªõc 2: T·∫°o c√¢u tr·∫£ l·ªùi t√¨nh hu·ªëng d·ª±a tr√™n intent
            $scenarioResponse = $this->generateScenarioResponse($intent, $userMessage, $userMessageLower);

            if (!$scenarioResponse) {
                return response()->json([
                    'message' => 'Xin l·ªói, m√¨nh ch∆∞a hi·ªÉu c√¢u h·ªèi c·ªßa b·∫°n. B·∫°n c√≥ th·ªÉ h·ªèi v·ªÅ s·∫£n ph·∫©m, gi√° c·∫£, giao h√†ng, thanh to√°n, ho·∫∑c c√°c d·ªãch v·ª• kh√°c nh√©! üòä',
                    'links' => []
                ], 200, [], JSON_UNESCAPED_UNICODE);
            }

            // B∆∞·ªõc 3: ƒê∆∞a qua Gemini API ƒë·ªÉ di·ªÖn ƒë·∫°t t·ª± nhi√™n h∆°n
            $enhancedResponse = $this->enhanceWithGemini($scenarioResponse, $userMessage, $intent);

            // L∆∞u l·ªãch s·ª≠ chat
            $this->saveChatHistory($userMessage, $enhancedResponse);

            return response()->json([
                'message' => $enhancedResponse,
                'links' => []
            ], 200, [], JSON_UNESCAPED_UNICODE);

        } catch (\Exception $e) {
            Log::error('Chatbot Error', [
                'message' => $userMessage,
                'error' => $e->getMessage()
            ]);

            return response()->json([
                'error' => 'C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i!',
                'links' => []
            ], 500, [], JSON_UNESCAPED_UNICODE);
        }
    }

    /**
     * Ph√°t hi·ªán Intent t·ª´ tin nh·∫Øn ng∆∞·ªùi d√πng
     */
    private function detectIntent($messageLower)
    {
        // Intent: S·∫£n ph·∫©m
        $productKeywords = ['s·∫£n ph·∫©m', 'm·∫Øt k√≠nh', 'k√≠nh', 'd√¢y chuy·ªÅn', 'k·∫πp t√≥c', 't√∫i x√°ch', 'nh·∫´n', 'b√¥ng tai', 'v√≤ng tay', 'm√≥ng tay gi·∫£', 'xem', 'c√≥', 'b√°n'];
        foreach ($productKeywords as $keyword) {
            if (str_contains($messageLower, $keyword)) {
                return 'product';
            }
        }

        // Intent: Danh m·ª•c
        if (str_contains($messageLower, 'danh m·ª•c') || str_contains($messageLower, 'lo·∫°i s·∫£n ph·∫©m')) {
            return 'category';
        }

        // Intent: Gi√° c·∫£ & T·ªìn kho
        if (str_contains($messageLower, 'gi√°') || str_contains($messageLower, 'bao nhi√™u') || str_contains($messageLower, 'c√≤n h√†ng') || str_contains($messageLower, 't·ªìn kho')) {
            return 'price_stock';
        }

        // Intent: Ph√≠ ship
        if (str_contains($messageLower, 'ship') || str_contains($messageLower, 'giao h√†ng') || str_contains($messageLower, 'ph√≠ v·∫≠n chuy·ªÉn') || str_contains($messageLower, 'ph√≠ giao h√†ng')) {
            return 'shipping';
        }

        // Intent: Thanh to√°n
        if (str_contains($messageLower, 'thanh to√°n') || str_contains($messageLower, 'payment') || str_contains($messageLower, 'momo') || str_contains($messageLower, 'cod') || str_contains($messageLower, 'payos') || str_contains($messageLower, 'vnpay')|| str_contains($messageLower, 'sepay')) {
            return 'payment';
        }

        // Intent: ƒê·ªïi tr·∫£ & B·∫£o h√†nh
        if (str_contains($messageLower, 'ƒë·ªïi') || str_contains($messageLower, 'tr·∫£') || str_contains($messageLower, 'b·∫£o h√†nh') || str_contains($messageLower, 'warranty')) {
            return 'return_warranty';
        }

        // Intent: Khuy·∫øn m√£i
        if (str_contains($messageLower, 'khuy·∫øn m√£i') || str_contains($messageLower, 'gi·∫£m gi√°') || str_contains($messageLower, 'sale') || str_contains($messageLower, 'voucher')) {
            return 'promotion';
        }

        // Intent: T∆∞ v·∫•n
        if (str_contains($messageLower, 't∆∞ v·∫•n') || str_contains($messageLower, 'g·ª£i √Ω') || str_contains($messageLower, 'ph√π h·ª£p') || str_contains($messageLower, 't·∫∑ng')) {
            return 'consultation';
        }

        // Intent: T√†i kho·∫£n & H·ªó tr·ª£
        if (str_contains($messageLower, 'ƒëƒÉng k√Ω') || str_contains($messageLower, 'ƒëƒÉng nh·∫≠p') || str_contains($messageLower, 't√†i kho·∫£n') || str_contains($messageLower, 'qu√™n m·∫≠t kh·∫©u') || str_contains($messageLower, 'h·ªó tr·ª£') || str_contains($messageLower, 'li√™n h·ªá')) {
            return 'account_support';
        }

        // Intent: ƒê∆°n h√†ng
        if (str_contains($messageLower, 'ƒë∆°n h√†ng') || str_contains($messageLower, 'order') || preg_match('/#[A-Z0-9]+/', $messageLower)) {
            return 'order_tracking';
        }

        // Intent: Ch√†o h·ªèi
        if (str_contains($messageLower, 'xin ch√†o') || str_contains($messageLower, 'ch√†o') || str_contains($messageLower, 'hello') || str_contains($messageLower, 'hi')) {
            return 'greeting';
        }

        // Default: General
        return 'general';
    }

    /**
     * T·∫°o c√¢u tr·∫£ l·ªùi t√¨nh hu·ªëng d·ª±a tr√™n intent
     */
    private function generateScenarioResponse($intent, $originalMessage, $messageLower)
    {
        switch ($intent) {
            case 'product':
                return $this->chatbotService->handleProductQuestions($originalMessage);

            case 'category':
                return $this->chatbotService->handleCategoryQuestions($originalMessage);

            case 'price_stock':
                return $this->chatbotService->handlePriceStockQuestions($originalMessage);

            case 'shipping':
                return $this->chatbotService->handleShippingQuestions($originalMessage);

            case 'payment':
                return $this->chatbotService->handlePaymentQuestions($originalMessage);

            case 'return_warranty':
                return $this->chatbotService->handleReturnWarrantyQuestions($originalMessage);

            case 'promotion':
                return $this->chatbotService->handlePromotionQuestions($originalMessage);

            case 'consultation':
                return $this->chatbotService->handleConsultationQuestions($originalMessage);

            case 'account_support':
                return $this->chatbotService->handleAccountSupportQuestions($originalMessage);

            case 'order_tracking':
                return $this->chatbotService->handleOrderTrackingQuestions($originalMessage);

            case 'greeting':
                return "Xin ch√†o! M√¨nh l√† tr·ª£ l√Ω ·∫£o c·ªßa shop N√†ng Th∆°. M√¨nh c√≥ th·ªÉ gi√∫p b·∫°n v·ªÅ:\n- Th√¥ng tin s·∫£n ph·∫©m\n- Gi√° c·∫£ v√† t·ªìn kho\n- Ph√≠ giao h√†ng\n- Thanh to√°n\n- Khuy·∫øn m√£i\n- T∆∞ v·∫•n s·∫£n ph·∫©m\nB·∫°n c·∫ßn h·ªó tr·ª£ g√¨ ·∫°?";

            default:
                return null;
        }
    }

    /**
     * ƒê∆∞a c√¢u tr·∫£ l·ªùi qua Gemini API ƒë·ªÉ di·ªÖn ƒë·∫°t t·ª± nhi√™n v√† hay h∆°n
     */
    private function enhanceWithGemini($scenarioResponse, $userMessage, $intent)
    {
        // N·∫øu kh√¥ng c√≥ scenario response, tr·∫£ v·ªÅ null
        if (!$scenarioResponse) {
            return null;
        }

        try {
            $apiKey = Config::get('services.gemini.api_key');
            if (!$apiKey) {
                Log::warning('Gemini API key not configured, returning scenario response as-is');
                return $scenarioResponse;
            }

            // T·∫°o system instruction ƒë·ªÉ Gemini bi·∫øt nhi·ªám v·ª•
            $systemInstruction = <<<SYS
            B·∫°n l√† tr·ª£ l√Ω AI th√¢n thi·ªán c·ªßa shop ph·ª• ki·ªán th·ªùi trang N√†ng Th∆°.

            NHI·ªÜM V·ª§:
            - Nh·∫≠n c√¢u tr·∫£ l·ªùi c√≥ s·∫µn (SCENARIO_RESPONSE) v√† di·ªÖn ƒë·∫°t l·∫°i cho t·ª± nhi√™n, hay v√† th√¢n thi·ªán nh∆∞ng chuy√™n nghi·ªáp
            - GI·ªÆ NGUY√äN t·∫•t c·∫£ th√¥ng tin quan tr·ªçng: t√™n s·∫£n ph·∫©m, gi√°, s·ªë l∆∞·ª£ng, ƒë·ªãa ch·ªâ, s·ªë ƒëi·ªán tho·∫°i, link, v.v.
            - KH√îNG th√™m th√¥ng tin kh√¥ng c√≥ trong SCENARIO_RESPONSE
            - KH√îNG b·ªãa ƒë·∫∑t ho·∫∑c thay ƒë·ªïi d·ªØ li·ªáu
            - Gi·ªØ nguy√™n format HTML n·∫øu c√≥ (nh∆∞ <b>, <ul>, <li>, <img>)
            - Tr·∫£ l·ªùi ng·∫Øn g·ªçn, s√∫c t√≠ch, d·ªÖ hi·ªÉu
            - S·ª≠ d·ª•ng emoji ph√π h·ª£p ƒë·ªÉ t·∫°o c·∫£m gi√°c th√¢n thi·ªán
            - Kh√¥ng s·ª≠ d·ª•ng emoji
            - Kh√¥ng ch√†o khi tr·∫£ l·ªùi

            NGUY√äN T·∫ÆC:
            - N·∫øu SCENARIO_RESPONSE c√≥ danh s√°ch s·∫£n ph·∫©m -> GI·ªÆ NGUY√äN t·∫•t c·∫£
            - N·∫øu c√≥ gi√° ti·ªÅn -> GI·ªÆ NGUY√äN s·ªë ti·ªÅn ch√≠nh x√°c
            - N·∫øu c√≥ th√¥ng tin li√™n h·ªá -> GI·ªÆ NGUY√äN
            - Ch·ªâ c·∫£i thi·ªán c√°ch di·ªÖn ƒë·∫°t, kh√¥ng thay ƒë·ªïi n·ªôi dung
            - Ch·ªâ tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát
            - N·∫øu c√≥ nhi·ªÅu m·ª•c th√¨ ph·∫£i li·ªát k√™ t·ª´ng m·ª•c th√†nh t·ª´ng d√≤ng
            SYS;

            // T·∫°o prompt
            $prompt = <<<PROMPT
            [USER_QUESTION]
            {$userMessage}

            [INTENT]
            {$intent}

            [SCENARIO_RESPONSE]
            {$scenarioResponse}

            H√£y di·ªÖn ƒë·∫°t l·∫°i SCENARIO_RESPONSE cho t·ª± nhi√™n v√† hay h∆°n, nh∆∞ng GI·ªÆ NGUY√äN t·∫•t c·∫£ th√¥ng tin quan tr·ªçng.
            PROMPT;

            // Chu·∫©n b·ªã payload
            $payload = [
                'contents' => [
                    [
                        'parts' => [
                            ['text' => $prompt]
                        ]
                    ]
                ],
                'systemInstruction' => [
                    'parts' => [
                        ['text' => $systemInstruction]
                    ]
                ],
                'generationConfig' => [
                    'maxOutputTokens' => 800,
                    'temperature' => 0.7,
                    'topP' => 0.9,
                    'topK' => 40,
                ],
            ];

            // G·ªçi Gemini API
            $response = Http::withOptions([
                'verify' => false,
                'timeout' => 30,
            ])->withHeaders([
                'Content-Type' => 'application/json',
            ])->post(
                "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp:generateContent?key={$apiKey}",
                $payload
            );

            if ($response->failed()) {
                Log::warning('Gemini API failed, returning scenario response', [
                    'status' => $response->status()
                ]);
                return $scenarioResponse;
            }

            $responseData = $response->json();
            $candidates = $responseData['candidates'] ?? [];

            if (!empty($candidates) && isset($candidates[0]['content']['parts'][0]['text'])) {
                $enhancedText = $candidates[0]['content']['parts'][0]['text'];
                return trim($enhancedText);
            }

            // Fallback n·∫øu kh√¥ng c√≥ response h·ª£p l·ªá
            return $scenarioResponse;

        } catch (\Exception $e) {
            Log::error('Gemini Enhancement Error', [
                'error' => $e->getMessage()
            ]);
            // Tr·∫£ v·ªÅ scenario response g·ªëc n·∫øu c√≥ l·ªói
            return $scenarioResponse;
        }
    }

    /**
     * L∆∞u l·ªãch s·ª≠ chat v√†o session
     */
    private function saveChatHistory($userMessage, $botResponse)
    {
        $messages = session('chat_messages', []);
        $messages[] = ['role' => 'user', 'content' => $userMessage];
        $messages[] = ['role' => 'bot', 'content' => $botResponse];
        
        // Gi·ªõi h·∫°n l·ªãch s·ª≠ 20 tin nh·∫Øn g·∫ßn nh·∫•t
        if (count($messages) > 20) {
            $messages = array_slice($messages, -20);
        }
        
        session(['chat_messages' => $messages]);
    }

    /**
     * Ch√†o ng∆∞·ªùi d√πng khi m·ªü chatbot
     */
    public function greet(Request $request)
    {
        // // N·∫øu ƒë√£ c√≥ l·ªãch s·ª≠ chat th√¨ kh√¥ng ch√†o l·∫°i
        // if (!empty(session('chat_messages', []))) {
        //     return response()->json([
        //         'message' => '',
        //         'links' => [],
        //         'skip' => true
        //     ]);
        // }

        // // N·∫øu ƒë√£ ch√†o trong session th√¨ b·ªè qua
        // if (session()->has('chatbot_greeted') && session('chatbot_greeted') === true) {
        //     return response()->json([
        //         'message' => '',
        //         'links' => [],
        //         'skip' => true
        //     ]);
        // }

        // Cooldown 6 gi·ªù
        $last = session('greet_last_at');
        if ($last) {
            try {
                $diffMinutes = now()->diffInMinutes(\Carbon\Carbon::parse($last));
                if ($diffMinutes < 360) {
                    return response()->json([
                        'message' => '',
                        'links' => [],
                        'skip' => true
                    ]);
                }
            } catch (\Throwable $e) {
                // ignore
            }
        }

        session(['chatbot_greeted' => true, 'greet_last_at' => now()->toDateTimeString()]);

        $name = Auth::check() ? (optional(Auth::user())->name ?? 'b·∫°n') : 'b·∫°n';

        $greetings = [
            "Ch√†o {$name} üëã M√¨nh l√† Mia ‚Äì tr·ª£ l√Ω c·ªßa N√†ng Th∆°. M√¨nh c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n h√¥m nay?",
            "Xin ch√†o {$name} üåü M√¨nh c√≥ th·ªÉ h·ªó tr·ª£ b·∫°n t√¨m ph·ª• ki·ªán ph√π h·ª£p kh√¥ng?",
            "Hello {$name} üòä B·∫°n ƒëang t√¨m m·∫´u n√†o? M√¨nh h·ªó tr·ª£ ngay!",
        ];

        $allSuggestions = [
            'Xem k√≠nh ch·ªëng tia UV',
            'T√∫i x√°ch ƒëang gi·∫£m gi√°',
            'Ki·ªÉm tra ƒë∆°n h√†ng',
            'T∆∞ v·∫•n qu√† t·∫∑ng',
            'Xem ph·ª• ki·ªán hot',
        ];

        shuffle($greetings);
        shuffle($allSuggestions);
        $selected = array_slice($allSuggestions, 0, 3);
        $greet = $greetings[0] . "\n\nG·ª£i √Ω: ‚Ä¢ " . implode(' ‚Ä¢ ', $selected);

        return response()->json([
            'message' => $greet,
            'links' => []
        ], 200, [], JSON_UNESCAPED_UNICODE);
    }
}
