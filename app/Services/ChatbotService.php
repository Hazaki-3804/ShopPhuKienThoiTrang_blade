<?php

namespace App\Services;

use App\Models\Product;
use App\Models\ProductImage;
use App\Models\Order;
use App\Models\ShippingFee;
use App\Models\Discount;
use App\Models\User;
use App\Models\Category;
use App\Services\ProductImageService;
use Illuminate\Support\Facades\Auth;
use Carbon\Carbon;

class ChatbotService
{
    protected $productImageService;

    public function __construct(ProductImageService $productImageService)
    {
        $this->productImageService = $productImageService;
    }
    /**
     * X·ª≠ l√Ω c√¢u h·ªèi v·ªÅ danh m·ª•c s·∫£n ph·∫©m
     */
    public function handleCategoryQuestions($message)
    {
        $categories = \App\Models\Category::all();
        
        if ($categories->isEmpty()) {
            return "Hi·ªán t·∫°i shop ch∆∞a c√≥ danh m·ª•c s·∫£n ph·∫©m n√†o. Vui l√≤ng quay l·∫°i sau!";
        }

        $response = "C√°c danh m·ª•c s·∫£n ph·∫©m t·∫°i shop N√†ng Th∆°:\n\n";
        foreach ($categories as $category) {
            $productCount = \App\Models\Product::where('category_id', $category->id)
                ->where('status', 1)
                ->count();
            $response .= "‚Ä¢ {$category->name} ({$productCount} s·∫£n ph·∫©m)\n";
        }
        
        $response .= "\nB·∫°n mu·ªën xem s·∫£n ph·∫©m n√†o? H√£y cho m√¨nh bi·∫øt nh√©!";
        
        return $response;
    }

    /**
     * X·ª≠ l√Ω c√¢u h·ªèi v·ªÅ theo d√µi ƒë∆°n h√†ng
     */
    public function handleOrderTrackingQuestions($message)
    {
        $message = strtolower($message);
        
        // T√¨m m√£ ƒë∆°n h√†ng trong tin nh·∫Øn
        if (preg_match('/#([A-Z0-9]+)/', $message, $matches)) {
            $orderCode = $matches[1];
            $order = Order::where('id', $orderCode)->first();
            
            if ($order) {
                $response = "Th√¥ng tin ƒë∆°n h√†ng #{$order->id}:\n\n";
                $response .= "Kh√°ch h√†ng: {$order->customer_name}\n";
                $response .= "SƒêT: {$order->customer_phone}\n";
                $response .= "ƒê·ªãa ch·ªâ: {$order->shipping_address}\n";
                $response .= "T·ªïng ti·ªÅn: " . number_format($order->total_price, 0, ',', '.') . "ƒë\n";
                $response .= "Tr·∫°ng th√°i: {$order->status_text}\n";
                $response .= "Ng√†y ƒë·∫∑t: " . $order->created_at->format('d/m/Y H:i');
                
                return $response;
            }
            
            return "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng v·ªõi m√£ #{$orderCode}. Vui l√≤ng ki·ªÉm tra l·∫°i!";
        }
        
        // N·∫øu user ƒë√£ ƒëƒÉng nh·∫≠p, hi·ªÉn th·ªã ƒë∆°n h√†ng g·∫ßn nh·∫•t
        if (\Illuminate\Support\Facades\Auth::check()) {
            $recentOrder = Order::where('user_id', \Illuminate\Support\Facades\Auth::id())
                ->latest()
                ->first();
            
            if ($recentOrder) {
                return "ƒê∆°n h√†ng g·∫ßn nh·∫•t c·ªßa b·∫°n:\n\n" .
                       "M√£ ƒë∆°n: #{$recentOrder->id}\n" .
                       "Tr·∫°ng th√°i: {$recentOrder->status_text}\n" .
                       "T·ªïng ti·ªÅn: " . number_format($recentOrder->total_price, 0, ',', '.') . "ƒë\n" .
                       "Ng√†y ƒë·∫∑t: " . $recentOrder->created_at->format('d/m/Y H:i');
            }
            
            return "B·∫°n ch∆∞a c√≥ ƒë∆°n h√†ng n√†o. H√£y mua s·∫Øm ngay!";
        }
        
        return "ƒê·ªÉ ki·ªÉm tra ƒë∆°n h√†ng, b·∫°n c√≥ th·ªÉ:\n" .
               "‚Ä¢ ƒêƒÉng nh·∫≠p t√†i kho·∫£n\n" .
               "‚Ä¢ Cung c·∫•p m√£ ƒë∆°n h√†ng (VD: #A1234)\n" .
               "‚Ä¢ G·ªçi hotline: 0123.456.789";
    }

    /**
     * X·ª≠ l√Ω c√¢u h·ªèi v·ªÅ s·∫£n ph·∫©m
     */
    public function handleProductQuestions($message)
    {
        $message = strtolower($message);
        
        // T·ª´ kh√≥a s·∫£n ph·∫©m
        $productKeywords = [
            'm·∫Øt k√≠nh' => ['m·∫Øt k√≠nh', 'k√≠nh', 'glasses'],
            'd√¢y chuy·ªÅn' => ['d√¢y chuy·ªÅn', 'v√≤ng c·ªï', 'necklace'],
            'k·∫πp t√≥c' => ['k·∫πp t√≥c', 'k·∫πp', 'hair clip'],
            't√∫i x√°ch' => ['t√∫i x√°ch', 't√∫i', 'bag'],
            'nh·∫´n' => ['nh·∫´n', 'ring'],
            'b√¥ng tai' => ['b√¥ng tai', 'khuy√™n tai', 'earring'],
            'v√≤ng tay' => ['v√≤ng tay', 'bracelet'],
            'm√≥ng tay gi·∫£' => ['m√≥ng tay gi·∫£', 'nail']
        ];

        $foundProduct = null;
        $productType = null;

        // T√¨m lo·∫°i s·∫£n ph·∫©m ƒë∆∞·ª£c nh·∫Øc ƒë·∫øn
        foreach ($productKeywords as $type => $keywords) {
            foreach ($keywords as $keyword) {
                if (str_contains($message, $keyword)) {
                    $foundProduct = $type;
                    $productType = $keyword;
                    break 2;
                }
            }
        }

        if ($foundProduct) {
            return $this->getProductInfo($foundProduct, $message);
        }
        
        // T√¨m ki·∫øm th√¥ng minh n·∫øu kh√¥ng t√¨m th·∫•y t·ª´ kh√≥a c·ª• th·ªÉ
        $smartProducts = $this->smartProductSearch($message);
        if ($smartProducts->isNotEmpty()) {
            return $this->generateSmartProductResponse($smartProducts, $message);
        }

        return null;
    }

    /**
     * L·∫•y th√¥ng tin s·∫£n ph·∫©m
     */
    private function getProductInfo($productType, $message)
    {
        // T√¨m s·∫£n ph·∫©m theo t√™n
        $products = Product::with(['category', 'product_images', 'reviews'])
            ->where('name', 'LIKE', "%{$productType}%")
            ->where('status', 1)
            ->inRandomOrder()
            ->take(3)
            ->get();

        if ($products->isEmpty()) {
            return "Xin l·ªói, hi·ªán t·∫°i shop ch∆∞a c√≥ s·∫£n ph·∫©m {$productType} n√†o. B·∫°n c√≥ th·ªÉ xem c√°c s·∫£n ph·∫©m kh√°c nh√©! üòä";
        }

        $response = "D∆∞·ªõi ƒë√¢y l√† {$products->count()} m·∫´u {$productType} m√† m√¨nh t√¨m th·∫•y:\n";
        
        foreach ($products as $product) {
            $response .= "<b>T√™n s·∫£n ph·∫©m:</b> {$product->name}\n";
            $response .= "<b>Gi√°:</b> " . number_format($product->price, 0, ',', '.') . "ƒë\n";
            $response .= "<b>C√≤n l·∫°i:</b> {$product->stock} s·∫£n ph·∫©m\n";
            
            // if ($product->description) {
            //     $response .= "<b>M√¥ t·∫£:</b> " . substr($product->description, 0, 100) . "...\n";
            // }
            
            // ƒê√°nh gi√° trung b√¨nh
            $avgRating = $product->reviews->avg('rating');
            if ($avgRating) {
                $response .= "ƒê√°nh gi√°: " . number_format($avgRating, 1) . "/5\n";
            }
        }
        $response .= "ƒê·ªÉ bi·∫øt th√™m th√¥ng tin v·ªÅ s·∫£n ph·∫©m, b·∫°n vui l√≤ng nh·∫•n v√†o n√∫t s·∫£n ph·∫©m ho·∫∑c thanh t√¨m ki·∫øm ƒë·ªÉ xem nhi·ªÅu m·∫´u h∆°n.\n";


        // X·ª≠ l√Ω c√¢u h·ªèi c·ª• th·ªÉ v·ªÅ h√¨nh ·∫£nh
        if (str_contains($message, 'h√¨nh') || str_contains($message, '·∫£nh') || str_contains($message, 'c·∫≠n c·∫£nh')) {
            if ($products->isNotEmpty()) {
                $firstProduct = $products->first();
                $imageHtml = $this->productImageService->generateImageHtml($firstProduct->id, $firstProduct->name);
                $response .= "\n" . $imageHtml;
                $response .= "\nXem chi ti·∫øt: " . $this->productImageService->generateProductLink($firstProduct->id);
            } else {
                $response .= "\nB·∫°n mu·ªën xem h√¨nh ·∫£nh s·∫£n ph·∫©m n√†o? Vui l√≤ng cho m√¨nh bi·∫øt t√™n s·∫£n ph·∫©m c·ª• th·ªÉ nh√©! üì∏";
            }
        }

        if (str_contains($message, 'ch·∫•t li·ªáu') || str_contains($message, 'l√†m b·∫±ng g√¨')) {
            $response .= "\nV·ªÅ ch·∫•t li·ªáu: T·∫•t c·∫£ s·∫£n ph·∫©m c·ªßa shop ƒë·ªÅu ƒë∆∞·ª£c l√†m t·ª´ ch·∫•t li·ªáu cao c·∫•p, an to√†n cho da.";
        }

        if (str_contains($message, 'd·ªÖ g√£y') || str_contains($message, 'b·ªÅn')) {
            $response .= "\nV·ªÅ ƒë·ªô b·ªÅn: S·∫£n ph·∫©m ƒë∆∞·ª£c ki·ªÉm tra ch·∫•t l∆∞·ª£ng k·ªπ c√†ng tr∆∞·ªõc khi giao h√†ng.";
        }

        return $response;
    }

    /**
     * X·ª≠ l√Ω c√¢u h·ªèi v·ªÅ gi√° v√† t·ªìn kho
     */
    public function handlePriceStockQuestions($message)
    {
        $message = strtolower($message);
        
        if (str_contains($message, 'gi√°') || str_contains($message, 'bao nhi√™u')) {
            // L·∫•y s·∫£n ph·∫©m g·∫ßn ƒë√¢y nh·∫•t t·ª´ session ho·∫∑c context
            $recentProducts = session('recent_products', []);
            
            if (!empty($recentProducts)) {
                $product = Product::find($recentProducts[0]);
                if ($product) {
                    $response = "{$product->name}\n";
                    $response .= "Gi√°: " . number_format($product->price, 0, ',', '.') . "ƒë\n";
                    $response .= "C√≤n l·∫°i: {$product->stock} s·∫£n ph·∫©m\n";
                    
                    // Hi·ªÉn th·ªã h√¨nh ·∫£nh ch√≠nh
                    $mainImage = $this->productImageService->getMainImage($product->id);
                    $response .= "H√¨nh ·∫£nh: {$mainImage}\n";
                    
                    // Ki·ªÉm tra gi·∫£m gi√°
                    $discount = $this->getActiveDiscount($product->id);
                    if ($discount) {
                        $discountedPrice = $this->calculateDiscountedPrice($product->price, $discount);
                        $response .= "Gi√° ∆∞u ƒë√£i: " . number_format($discountedPrice, 0, ',', '.') . "ƒë\n";
                        $response .= "M√£ gi·∫£m gi√°: **{$discount->code}**\n";
                    }
                    
                    return $response;
                }
            }
        }

        if (str_contains($message, 'c√≤n h√†ng') || str_contains($message, 't·ªìn kho')) {
            return "ƒê·ªÉ ki·ªÉm tra t·ªìn kho ch√≠nh x√°c, b·∫°n vui l√≤ng cho m√¨nh bi·∫øt s·∫£n ph·∫©m c·ª• th·ªÉ nh√©!";
        }

        if (str_contains($message, 'ship') || str_contains($message, 'giao h√†ng') || str_contains($message, 'freeship')|| str_contains($message, 'ph√≠ v·∫≠n chuy·ªÉn')) {
            return "Ph√≠ giao h√†ng:\n\n" .
                   "N·ªôi th√†nh Vƒ©nh Long: 15.000ƒë\n" .
                   "L√¢n c·∫≠n (< 50km): 25.000ƒë\n" .
                   "To√†n qu·ªëc: 35.000ƒë\n\n" .
                   "MI·ªÑN PH√ç SHIP cho ƒë∆°n h√†ng t·ª´ 500.000ƒë!\n" .
                   "Th·ªùi gian giao: 1-7 ng√†y t√πy khu v·ª±c";
        }

        if (str_contains($message, 'combo') || str_contains($message, 'mua nhi·ªÅu')) {
            return "∆Øu ƒë√£i mua nhi·ªÅu:\n\n" .
                   "Mua 2 s·∫£n ph·∫©m: Gi·∫£m 5%\n" .
                   "Mua 3 s·∫£n ph·∫©m: Gi·∫£m 10% + Freeship\n" .
                   "Mua 5 s·∫£n ph·∫©m: Gi·∫£m 15% + Freeship + Qu√† t·∫∑ng\n\n" .
                   "L∆∞u √Ω: √Åp d·ª•ng t·ª± ƒë·ªông khi thanh to√°n!";
        }

        return null;
    }

    /**
     * X·ª≠ l√Ω c√¢u h·ªèi v·ªÅ giao h√†ng
     */
    public function handleShippingQuestions($message)
    {
        $message = strtolower($message);

        if (str_contains($message, 'giao h√†ng') || str_contains($message, 'ship')||str_contains($message, 'ph√≠ ship')||str_contains($message, 'ph√≠ v·∫≠n chuy·ªÉn')) {
            if (str_contains($message, 'bao l√¢u') || str_contains($message, 'th·ªùi gian')) {
                return "Th·ªùi gian giao h√†ng:\n- N·ªôi th√†nh Vƒ©nh Long: 1-2 ng√†y\n- L√¢n c·∫≠n: 2-3 ng√†y\n- To√†n qu·ªëc: 3-7 ng√†y\n\nShop s·∫Ω g·ªçi x√°c nh·∫≠n tr∆∞·ªõc khi giao h√†ng nh√©!";
            }

            if (str_contains($message, 'ph√≠') || str_contains($message, 'gi√°')) {
                $shippingFees = ShippingFee::where('status', true)->orderBy('priority')->get();
                $response = "B·∫£ng ph√≠ giao h√†ng:\n";
                
                foreach ($shippingFees as $fee) {
                    $response .= " {$fee->getAreaTypeLabel()}: ";
                    if ($fee->is_free_shipping) {
                        $response .= "Mi·ªÖn ph√≠\n";
                    } else {
                        $response .= number_format($fee->base_fee, 0, ',', '.') . "ƒë\n";
                    }
                }
                
                $response .= "\nMi·ªÖn ph√≠ ship cho ƒë∆°n h√†ng t·ª´ 500.000ƒë!";
                return $response;
            }
        }

        // Ki·ªÉm tra ƒë∆°n h√†ng v·ªõi m√£ c·ª• th·ªÉ
        if (str_contains($message, 'ki·ªÉm tra ƒë∆°n') || str_contains($message, 'ƒë∆°n h√†ng') || preg_match('/#[A-Z0-9]+/', $message)) {
            // if(Auth::check()){
            // // T√¨m m√£ ƒë∆°n h√†ng trong tin nh·∫Øn
            // if (preg_match('/#([A-Z0-9]+)/', $message, $matches)) {
            //     $orderCode = $matches[1];
            //     $order = Order::where('id', $orderCode)->first();
                
            //     if ($order) {
            //         $response = "Th√¥ng tin ƒë∆°n h√†ng #{$order->id}:\n";
            //         $response .= "Kh√°ch h√†ng: {$order->customer_name}\n";
            //         $response .= "SƒêT: {$order->customer_phone}\n";
            //         $response .= "ƒê·ªãa ch·ªâ: {$order->shipping_address}\n";
            //         $response .= " T·ªïng ti·ªÅn: " . number_format($order->total_price, 0, ',', '.') . "ƒë\n";
            //         $response .= "Tr·∫°ng th√°i: {$order->status_text}\n";
            //         $response .= "Ng√†y ƒë·∫∑t: " . $order->created_at->format('d/m/Y H:i');
                    
            //         return $response;
            //     }
                
            //     return "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng v·ªõi m√£ #{$orderCode}. Vui l√≤ng ki·ªÉm tra l·∫°i m√£ ƒë∆°n h√†ng!";
            // }
            // }
            
            if (Auth::check()) {
                $recentOrder = Order::where('user_id', Auth::id())
                    ->latest()
                    ->first();
                
                if ($recentOrder) {
                    return "ƒê∆°n h√†ng g·∫ßn nh·∫•t:\n" .
                           "M√£ ƒë∆°n: #{$recentOrder->id}\n" .
                           "Tr·∫°ng th√°i: {$recentOrder->status_text}\n" .
                           "T·ªïng ti·ªÅn: " . number_format($recentOrder->total_price, 0, ',', '.') . "ƒë\n" .
                           "Ng√†y ƒë·∫∑t: " . $recentOrder->created_at->format('d/m/Y H:i')."\n".
                           "ƒê·ªÉ bi·∫øt th√™m th√¥ng tin c·ªßa c√°c ƒë∆°n h√†ng b·∫°n c√≥ th·ªÉ truy c·∫≠p v√†o <a style='color:orange;' href=".route('users.order.index').">ƒë√¢y</a>";
                }
            }
            
            return "ƒê·ªÉ ki·ªÉm tra ƒë∆°n h√†ng, b·∫°n c√≥ th·ªÉ:\n" .
                   "ƒêƒÉng nh·∫≠p t√†i kho·∫£n\n" .
                   "Cung c·∫•p m√£ ƒë∆°n h√†ng (VD: #A1234)\n" .
                   "G·ªçi hotline: 0779089258";
        }

        return null;
    }

    /**
     * X·ª≠ l√Ω c√¢u h·ªèi v·ªÅ thanh to√°n
     */
    public function handlePaymentQuestions($message)
    {
        $message = strtolower($message);

        if (str_contains($message, 'thanh to√°n') || str_contains($message, 'payment')) {
            $response = "C√°c h√¨nh th·ª©c thanh to√°n:\n";
            $response .= "COD (Thanh to√°n khi nh·∫≠n h√†ng)\n";
            $response .= "Chuy·ªÉn kho·∫£n ng√¢n h√†ng\n";
            $response .= "V√≠ ƒëi·ªán t·ª≠: Momo, ZaloPay\n";
            $response .= "Th·∫ª t√≠n d·ª•ng/ghi n·ª£\n";
            $response .= "T·∫•t c·∫£ ƒë·ªÅu an to√†n v√† b·∫£o m·∫≠t!";
            
            return $response;
        }

        if (str_contains($message, 'momo')) {
            return "Thanh to√°n Momo: C√≥ h·ªó tr·ª£! B·∫°n c√≥ th·ªÉ thanh to√°n qua v√≠ Momo r·∫•t ti·ªán l·ª£i v√† nhanh ch√≥ng. ";
        }

        if (str_contains($message, 'cod')) {
            return "COD (Cash on Delivery): C√≥ nh·∫≠n! B·∫°n thanh to√°n khi nh·∫≠n h√†ng, r·∫•t an to√†n v√† ti·ªán l·ª£i. üíµ";
        }

        if (str_contains($message, 'h√≥a ƒë∆°n')) {
            return "H√≥a ƒë∆°n: Shop xu·∫•t h√≥a ƒë∆°n VAT cho t·∫•t c·∫£ ƒë∆°n h√†ng. B·∫°n vui l√≤ng cung c·∫•p th√¥ng tin c√¥ng ty khi ƒë·∫∑t h√†ng nh√©!";
        }

        return null;
    }

    /**
     * X·ª≠ l√Ω c√¢u h·ªèi v·ªÅ ƒë·ªïi tr·∫£ v√† b·∫£o h√†nh
     */
    public function handleReturnWarrantyQuestions($message)
    {
        $message = strtolower($message);

        if (str_contains($message, 'ƒë·ªïi') || str_contains($message, 'tr·∫£') || str_contains($message, 'return')) {
            $response = "Ch√≠nh s√°ch ƒë·ªïi tr·∫£:\n";
            $response .= "Th·ªùi gian: 7 ng√†y k·ªÉ t·ª´ khi nh·∫≠n h√†ng\n";
            $response .= "ƒêi·ªÅu ki·ªán:\n";
            $response .= "   - S·∫£n ph·∫©m c√≤n nguy√™n v·∫πn, ch∆∞a s·ª≠ d·ª•ng\n";
            $response .= "   - C√≤n ƒë·∫ßy ƒë·ªß bao b√¨, nh√£n m√°c\n";
            $response .= "   - C√≥ h√≥a ƒë∆°n mua h√†ng\n\n";
            $response .= "Ph√≠ ship ƒë·ªïi tr·∫£: Shop h·ªó tr·ª£ n·∫øu l·ªói do shop\n";
            $response .= "Li√™n h·ªá: G·ªçi hotline ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ nhanh nh·∫•t!";
            
            return $response;
        }

        if (str_contains($message, 'b·∫£o h√†nh') || str_contains($message, 'warranty')) {
            return "Ch√≠nh s√°ch b·∫£o h√†nh:\n\n" .
                   "Ph·ª• ki·ªán kim lo·∫°i: 3 th√°ng\n" .
                   "M·∫Øt k√≠nh: 6 th√°ng\n" .
                   "S·∫£n ph·∫©m ƒëi·ªán t·ª≠: 12 th√°ng\n\n" .
                   "B·∫£o h√†nh mi·ªÖn ph√≠ l·ªói k·ªπ thu·∫≠t, kh√¥ng bao g·ªìm h∆∞ h·ªèng do s·ª≠ d·ª•ng sai c√°ch.";
        }

        return null;
    }

    /**
     * X·ª≠ l√Ω c√¢u h·ªèi v·ªÅ khuy·∫øn m√£i
     */
    public function handlePromotionQuestions($message)
    {
        $message = strtolower($message);

        if (str_contains($message, 'gi·∫£m gi√°') || str_contains($message, 'khuy·∫øn m√£i') || str_contains($message, 'sale')) {
            $activeDiscounts = Discount::where('status', 1)
                ->where('start_date', '<=', Carbon::now())
                ->where('end_date', '>=', Carbon::now())
                ->where('used_quantity', '<', 'quantity')
                ->take(5)
                ->get();

            if ($activeDiscounts->isEmpty()) {
                return "Hi·ªán t·∫°i ch∆∞a c√≥ ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i n√†o ƒëang di·ªÖn ra. B·∫°n theo d√µi fanpage ƒë·ªÉ c·∫≠p nh·∫≠t ∆∞u ƒë√£i m·ªõi nh·∫•t nh√©! üì¢";
            }

            $response = "Khuy·∫øn m√£i ƒëang di·ªÖn ra:\n";
            
            foreach ($activeDiscounts as $discount) {
                $response .= "{$discount->code}\n";
                if ($discount->description) {
                    $response .= " {$discount->description}\n";
                }
                
                if ($discount->discount_type === 'percentage') {
                    $response .= "Gi·∫£m {$discount->discount_value}%\n";
                } else {
                    $response .= "Gi·∫£m " . number_format($discount->discount_value, 0, ',', '.') . "ƒë\n";
                }
                
                $response .= "H·∫øt h·∫°n: " . $discount->end_date->format('d/m/Y') . "\n";
            }

            return $response;
        }

        if (str_contains($message, 'm√£ gi·∫£m gi√°') || str_contains($message, 'voucher')) {
            return "C√°ch s·ª≠ d·ª•ng m√£ gi·∫£m gi√°:\n\n" .
                   "Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng\n" .
                   "Nh·∫≠p m√£ v√†o √¥ 'M√£ gi·∫£m gi√°'\n" .
                   "Nh·∫•n '√Åp d·ª•ng'\n" .
                   "Ho√†n t·∫•t thanh to√°n\n\n" .
                   "L∆∞u √Ω: M·ªói m√£ ch·ªâ s·ª≠ d·ª•ng 1 l·∫ßn/kh√°ch h√†ng!";
        }

        return null;
    }

    /**
     * X·ª≠ l√Ω c√¢u h·ªèi t∆∞∆°ng t√°c v√† t∆∞ v·∫•n
     */
    public function handleConsultationQuestions($message)
    {
        $message = strtolower($message);

        // T∆∞ v·∫•n theo khu√¥n m·∫∑t
        if (str_contains($message, 'm·∫∑t tr√≤n') || str_contains($message, 'khu√¥n m·∫∑t') || str_contains($message, 'ph√π h·ª£p')) {
            $response = "T∆∞ v·∫•n theo khu√¥n m·∫∑t: \n";
            
            if (str_contains($message, 'tr√≤n')) {
                $response .= "M·∫∑t tr√≤n c·ªßa b·∫°n ph√π h·ª£p v·ªõi:\n";
                $response .= " K√≠nh g·ªçng vu√¥ng, ch·ªØ nh·∫≠t\n";
                $response .= " K√≠nh aviator, cat-eye\n";
                $response .= " B√¥ng tai d√†i, h√¨nh gi·ªçt n∆∞·ªõc\n";
                $response .= " D√¢y chuy·ªÅn d√†i, m·∫∑t pendant\n\n";
                
                // G·ª£i √Ω s·∫£n ph·∫©m c·ª• th·ªÉ
                $products = Product::where('name', 'LIKE', '%k√≠nh%')
                    ->where('status', 1)
                    ->take(2)
                    ->get();
                    
                if ($products->isNotEmpty()) {
                    $response .= "G·ª£i √Ω s·∫£n ph·∫©m:\n";
                    foreach ($products as $product) {
                        $response .= "‚Ä¢ {$product->name} - " . number_format($product->price, 0, ',', '.') . "ƒë\n";
                    }
                }
            } else {
                $response .= "M·∫∑t tr√≤n: K√≠nh vu√¥ng, ch·ªØ nh·∫≠t\n";
                $response .= "M·∫∑t vu√¥ng: K√≠nh tr√≤n, oval\n";
                $response .= "M·∫∑t d√†i: K√≠nh to, g·ªçng d√†y\n";
                $response .= "M·∫∑t tr√°i tim: K√≠nh m·∫Øt m√®o, aviator\n\n";
                $response .= "B·∫°n cho m√¨nh bi·∫øt khu√¥n m·∫∑t ƒë·ªÉ t∆∞ v·∫•n c·ª• th·ªÉ h∆°n nh√©!";
            }
            
            return $response;
        }

        // T∆∞ v·∫•n qu√† t·∫∑ng v·ªõi ng√¢n s√°ch
        if (str_contains($message, 't·∫∑ng') || str_contains($message, 'qu√†')) {
            $response = "G·ª£i √Ω qu√† t·∫∑ng:\n\n";
            
            // Ph√¢n t√≠ch ng√¢n s√°ch t·ª´ tin nh·∫Øn
            if (preg_match('/([0-9]+).*(?:k|000|tri·ªáu)/', $message, $matches)) {
                $budget = intval($matches[1]);
                if (str_contains($message, 'k') || str_contains($message, '000')) {
                    $budget *= 1000;
                } elseif (str_contains($message, 'tri·ªáu')) {
                    $budget *= 1000000;
                }
                
                $products = Product::where('price', '<=', $budget)
                    ->where('status', 1)
                    ->orderBy('price', 'desc')
                    ->take(3)
                    ->get();
                    
                $response .= " **Trong ng√¢n s√°ch " . number_format($budget, 0, ',', '.') . "ƒë:**\n";
                foreach ($products as $product) {
                    $response .= "‚Ä¢ {$product->name} - " . number_format($product->price, 0, ',', '.') . "ƒë\n";
                }
                $response .= "\n";
            }
            
            $response .= "Theo ƒë·ªëi t∆∞·ª£ng:\n";
            $response .= "B·∫°n g√°i: D√¢y chuy·ªÅn, b√¥ng tai, v√≤ng tay\n";
            $response .= "M·∫π/Ch·ªã: T√∫i x√°ch, k√≠nh th·ªùi trang\n";
            $response .= "Em g√°i: K·∫πp t√≥c, nh·∫´n xinh\n";
            $response .= "Sinh nh·∫≠t: Set ph·ª• ki·ªán combo\n\n";
            
            if (!str_contains($message, 'k') && !str_contains($message, '000') && !str_contains($message, 'tri·ªáu')) {
                $response .= "Cho m√¨nh bi·∫øt ng√¢n s√°ch ƒë·ªÉ t∆∞ v·∫•n ph√π h·ª£p nh√©!**";
            }
            
            return $response;
        }

        // T∆∞ v·∫•n theo m√†u s·∫Øc
        if (str_contains($message, 'm√†u h·ªìng') || str_contains($message, 'm√†u')) {
            return "T∆∞ v·∫•n theo m√†u s·∫Øc:\n" .
                   "M√†u h·ªìng: D√¢y chuy·ªÅn h·ªìng, b√¥ng tai h·ªìng pastel\n" .
                   "M√†u ƒëen: K√≠nh ƒëen, t√∫i ƒëen sang tr·ªçng\n" .
                   "M√†u v√†ng: Nh·∫´n v√†ng, v√≤ng tay v√†ng\n" .
                   "M√†u tr·∫Øng: Ph·ª• ki·ªán ng·ªçc trai, b·∫°c\n\n" .
                   "B·∫°n th√≠ch m√†u g√¨ nh·∫•t?";
        }

        return null;
    }

    /**
     * X·ª≠ l√Ω c√¢u h·ªèi v·ªÅ t√†i kho·∫£n v√† h·ªó tr·ª£
     */
    public function handleAccountSupportQuestions($message)
    {
        $message = strtolower($message);
        if(str_contains($message, 'ƒëƒÉng k√Ω')){
            return "ƒê·ªÉ c√≥ th·ªÉ ƒëƒÉng k√Ω v√†o h·ªá th·ªëng c·ªßa ch√∫ng t√¥i, b·∫°n c·∫ßn:\n" .
                   "\t1. V√†o trang ƒëƒÉng k√Ω\n" .
                   "\t2. Nh·∫•n 'ƒêƒÉng k√Ω'\n" .
                   "\t3. Nh·∫≠p email ƒë√£ ƒëƒÉng k√Ω\n" .
                   "\t4. Nh·∫≠p m·∫≠t kh·∫©u\n" .
                   "\t5. Nh·∫•n n√∫t 'ƒêƒÉng k√Ω'\n".
                   "Sau ƒë√≥ b·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c email x√°c nh·∫≠n\n";
        }
        if(str_contains($message, 'ƒëƒÉng nh·∫≠p')){
            return "ƒê·ªÉ c√≥ th·ªÉ ƒëƒÉng nh·∫≠p v√†o h·ªá th·ªëng c·ªßa ch√∫ng t√¥i, b·∫°n c·∫ßn:\n" .
                   "\t1. V√†o trang ƒëƒÉng nh·∫≠p\n" .
                   "\t2. Nh·∫•n 'ƒêƒÉng nh·∫≠p'\n" .
                   "\t3. Nh·∫≠p email ƒë√£ ƒëƒÉng k√Ω\n" .
                   "\t4. Nh·∫≠p m·∫≠t kh·∫©u\n" .
                   "\t5. Nh·∫•n n√∫t 'ƒêƒÉng nh·∫≠p'\n".
                   "Ho·∫∑c b·∫°n c≈©ng c√≥ th·ªÉ ƒëƒÉng nh·∫≠p qua Google, Facebook\n";
        }

        if (str_contains($message, 'qu√™n m·∫≠t kh·∫©u') || str_contains($message, 'reset password')) {
            return "N·∫øu b·∫°n l·ª° qu√™n m·∫≠t kh·∫©u, b·∫°n ƒë·ª´ng lo l·∫Øng nh√©!\n" .
                   "B·∫°n ch·ªâ c·∫ßn:\n" .
                   "\t1. V√†o trang ƒëƒÉng nh·∫≠p\n" .
                   "\t2. Nh·∫•n 'Qu√™n m·∫≠t kh·∫©u?'\n" .
                   "\t3. Nh·∫≠p email ƒë√£ ƒëƒÉng k√Ω\n" .
                   "\t4. Nh·∫•n n√∫t 'Qu√™n m·∫≠t kh·∫©u?'\n" .
                   "\t5. Ki·ªÉm tra email v√† l√†m theo h∆∞·ªõng d·∫´n\n" .
                   "N·∫øu kh√¥ng th·∫•y email, h√£y ki·ªÉm tra th∆∞ m·ª•c spam nh√©!";
        }

        if (str_contains($message, 'theo d√µi ƒë∆°n h√†ng') || str_contains($message, 'track order')) {
            if (Auth::check()) {
                $userOrders = Order::where('user_id', Auth::id())
                    ->orderBy('created_at', 'desc')
                    ->take(3)
                    ->get();
                    
                $response = "ƒê∆°n h√†ng c·ªßa b·∫°n:\n\n";
                
                if ($userOrders->isNotEmpty()) {
                    foreach ($userOrders as $order) {
                        $response .= "ƒê∆°n #{$order->id}\n";
                        $response .= "Tr·∫°ng th√°i: {$order->status_text}\n";
                        $response .= "T·ªïng ti·ªÅn: " . number_format($order->total_price, 0, ',', '.') . "ƒë\n";
                        $response .= "Ng√†y ƒë·∫∑t: " . $order->created_at->format('d/m/Y') . "\n\n";
                    }
                } else {
                    $response .= "B·∫°n ch∆∞a c√≥ ƒë∆°n h√†ng n√†o.\n\n";
                }
                
                $response .= "Xem chi ti·∫øt t·∫°i: T√†i kho·∫£n > ƒê∆°n h√†ng c·ªßa tui\n";
                $response .= "Ho·∫∑c nh·∫Øn m√£ ƒë∆°n h√†ng ƒë·ªÉ ki·ªÉm tra!";
                
                return $response;
            }
            
            return "ƒê·ªÉ theo d√µi ƒë∆°n h√†ng:\n" .
                   "ƒêƒÉng nh·∫≠p t√†i kho·∫£n\n" .
                   "Cung c·∫•p m√£ ƒë∆°n h√†ng (VD: #A1234)\n" .
                   "G·ªçi hotline: 0123.456.789";
        }

        if (str_contains($message, 'ƒë·ªïi ƒë·ªãa ch·ªâ') || str_contains($message, 'change address')) {
            return "ƒê·ªïi ƒë·ªãa ch·ªâ nh·∫≠n h√†ng:\n" .
                   "Tr∆∞·ªõc khi giao: Li√™n h·ªá hotline ngay\n" .
                   "Trong t√†i kho·∫£n: V√†o 'Th√¥ng tin c√° nh√¢n' ƒë·ªÉ c·∫≠p nh·∫≠t\n" .
                   "Sau khi giao: Kh√¥ng th·ªÉ thay ƒë·ªïi\n\n" .
                   "Hotline: 0123.456.789";
        }

        if (str_contains($message, 'nh√¢n vi√™n') || str_contains($message, 'h·ªó tr·ª£') || str_contains($message, 'support') || str_contains($message, 'li√™n h·ªá')) {
            $currentHour = Carbon::now()->hour;
            $isWorkingHours = $currentHour >= 8 && $currentHour <= 22;
            
            $response = "H·ªó tr·ª£ kh√°ch h√†ng:\n";
            $response .= "Hotline: 0123.456.789\n";
            
            if ($isWorkingHours) {
                $response .= "ƒêang online - S·∫µn s√†ng h·ªó tr·ª£!\n";
            } else {
                $response .= "Ngo√†i gi·ªù l√†m vi·ªác - S·∫Ω ph·∫£n h·ªìi s·ªõm nh·∫•t!\n";
            }
            
            $response .= "\nC√°c k√™nh li√™n h·ªá:\n";
            $response .= "  Chat tr·ª±c ti·∫øp: Ngay t·∫°i ƒë√¢y\n";
            $response .= " Email: support@nangthoshop.com\n";
            $response .= " Facebook: fb.com/nangthoshop\n";
            $response .= " Zalo: 0123.456.789\n";
            $response .= "Gi·ªù l√†m vi·ªác: 8h-22h h√†ng ng√†y\n";
            $response .= "Ph·∫£n h·ªìi: Trong v√≤ng 5 ph√∫t (gi·ªù h√†nh ch√≠nh)";
            
            return $response;
        }

        return null;
    }

    /**
     * L·∫•y discount ƒëang ho·∫°t ƒë·ªông cho s·∫£n ph·∫©m
     */
    private function getActiveDiscount($productId)
    {
        return Discount::whereHas('products', function($query) use ($productId) {
                $query->where('product_id', $productId);
            })
            ->where('status', 1)
            ->where('start_date', '<=', Carbon::now())
            ->where('end_date', '>=', Carbon::now())
            ->where('used_quantity', '<', 'quantity')
            ->first();
    }

    /**
     * T√≠nh gi√° sau khi gi·∫£m
     */
    private function calculateDiscountedPrice($originalPrice, $discount)
    {
        if ($discount->discount_type === 'percentage') {
            return $originalPrice * (1 - $discount->discount_value / 100);
        }
        
        return max(0, $originalPrice - $discount->discount_value);
    }

    /**
     * T√¨m ki·∫øm s·∫£n ph·∫©m th√¥ng minh
     */
    public function smartProductSearch($query)
    {
        $query = strtolower($query);
        
        // T·ª´ ƒë·ªìng nghƒ©a
        $synonyms = [
            'k√≠nh' => ['m·∫Øt k√≠nh', 'glasses', 'k√≠nh r√¢m'],
            't√∫i' => ['t√∫i x√°ch', 'bag', 'handbag'],
            'd√¢y' => ['d√¢y chuy·ªÅn', 'v√≤ng c·ªï', 'necklace'],
            'b√¥ng' => ['b√¥ng tai', 'khuy√™n tai', 'earring'],
            'v√≤ng' => ['v√≤ng tay', 'bracelet', 'l·∫Øc tay'],
            'nh·∫´n' => ['ring', 'nh·∫´n ƒë√¥i'],
            'k·∫πp' => ['k·∫πp t√≥c', 'hair clip', 'c√†i t√≥c']
        ];
        
        $searchTerms = [$query];
        
        // M·ªü r·ªông t·ª´ kh√≥a t√¨m ki·∫øm
        foreach ($synonyms as $key => $values) {
            if (str_contains($query, $key) || in_array($query, $values)) {
                $searchTerms = array_merge($searchTerms, $values);
                break;
            }
        }
        
        // T√¨m ki·∫øm s·∫£n ph·∫©m
        $products = Product::where('status', 1)
            ->where(function($q) use ($searchTerms) {
                foreach ($searchTerms as $term) {
                    $q->orWhere('name', 'LIKE', "%{$term}%")
                      ->orWhere('description', 'LIKE', "%{$term}%");
                }
            })
            ->with(['category', 'product_images', 'reviews'])
            ->take(5)
            ->get();
            
        return $products;
    }

    /**
     * T·∫°o response th√¥ng minh cho s·∫£n ph·∫©m
     */
    public function generateSmartProductResponse($products, $originalQuery)
    {
        if ($products->isEmpty()) {
            return "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ph√π h·ª£p v·ªõi '{$originalQuery}'. B·∫°n c√≥ th·ªÉ th·ª≠:\n" .
                   " T√¨m theo danh m·ª•c\n" .
                   " G·ªçi hotline: 0123.456.789\n" .
                   " Chat tr·ª±c ti·∫øp v·ªõi nh√¢n vi√™n";
        }
        
        $response = "T√¨m th·∫•y {$products->count()} s·∫£n ph·∫©m ph√π h·ª£p v·ªõi '{$originalQuery}':\n\n";
        
        foreach ($products as $index => $product) {
            $response .= "{$product->name}\n";
            $response .= "Gi√°: " . number_format($product->price, 0, ',', '.') . "ƒë\n";
            $response .= "C√≤n: {$product->stock} s·∫£n ph·∫©m\n";
            
            // ƒê√°nh gi√°
            $avgRating = $product->reviews->avg('rating');
            if ($avgRating) {
                $stars = str_repeat('‚≠ê', round($avgRating));
                $response .= " {$stars} (" . number_format($avgRating, 1) . "/5)\n";
            }
            
            // Link s·∫£n ph·∫©m
            $response .= "Xem chi ti·∫øt: " . $this->productImageService->generateProductLink($product->id) . "\n\n";
        }
        
        $response .= "C·∫ßn t∆∞ v·∫•n th√™m? H·ªèi m√¨nh v·ªÅ ch·∫•t li·ªáu, k√≠ch th∆∞·ªõc, ho·∫∑c c√°ch ph·ªëi ƒë·ªì nh√©!";
        
        return $response;
    }
}
